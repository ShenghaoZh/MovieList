{"version":3,"sources":["modules/index.js","components/List.js","modules/selectors.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","fetchData","data","type","actions","addItem","item","removeItem","initialState","myList","recommendation","reducer","state","action","mylist","recommendations","filter","list","id","List","content","title","handleFunction","className","map","key","src","img","alt","onClick","selectors","getMyList","getRecommendation","App","store","dispatch","axios","get","then","response","catch","alert","this","props","React","Component","connect","bindActionCreators","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.e166771a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const ACTIONS = {\n  ADD_ITEM: \"ADD_ITEM\",\n  FETCH_DATA: \"FETCH_DATA\",\n  REMOVE_ITEM: \"REMOVE_ITEM\",\n};\n\nexport const addItem = (item) => ({\n  type: ACTIONS.ADD_ITEM,\n  item,\n});\n\nexport const fetchData = (data) => ({\n  type: ACTIONS.FETCH_DATA,\n  data,\n});\n\nexport const removeItem = (item) => ({\n  type: ACTIONS.REMOVE_ITEM,\n  item,\n});\n\nexport const actions = {\n  addItem,\n  fetchData,\n  removeItem,\n};\n\nexport const getList = () => {\n  return (dispatch) => {\n    axios\n      .get(\"moviedata.json\")\n      .then((response) => {\n        const data = response.data;\n        dispatch(fetchData(data));\n      })\n      .catch(() => {\n        alert(\"Error: fetching data\");\n      });\n  };\n};\n\nconst initialState = {\n  myList: [],\n  recommendation: [],\n};\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ACTIONS.FETCH_DATA:\n      return {\n        ...state,\n        myList: action.data.mylist,\n        recommendation: action.data.recommendations,\n      };\n    case ACTIONS.REMOVE_ITEM:\n      return {\n        ...state,\n        myList: state.myList.filter((list) => list.id !== action.item.id),\n        recommendation: [...state.recommendation, action.item],\n      };\n    case ACTIONS.ADD_ITEM:\n      return {\n        ...state,\n        myList: [...state.myList, action.item],\n        recommendation: state.recommendation.filter(\n          (list) => list.id !== action.item.id\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst List = ({ content, title, handleFunction }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      <div className=\"my-list\">\n        {content.map((item) => (\n          <div className=\"hover-div\" key={item.id}>\n            <h5>{item.title}</h5>\n            <div>\n              <img className=\"list-item-image\" src={item.img} alt={item.title} />\n            </div>\n            <button className=\"list-item-button\" id={item.id} onClick={() => handleFunction(item)}>\n              {title === \"Recommendations\" ? \"Add\" : \"Remove\"}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","const getMyList = (state) => state.myList;\n\nconst getRecommendation = (state) => state.recommendation;\n\nconst selectors = {\n  getMyList,\n  getRecommendation,\n};\n\nexport default selectors;","import React from 'react';\nimport './App.css';\n\nimport store from \"./index\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport List from \"./components/List.js\";\nimport { actions, getList } from \"./modules/index\";\nimport selectors from \"./modules/selectors\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    store.dispatch(getList());\n  }\n\n  render() {\n    const { myList, recommendation, actions } = this.props;\n    const { removeItem, addItem } = actions;\n    return (\n      <div>\n        <List\n          title=\"My List\"\n          content={myList}\n          handleFunction={removeItem}\n        />\n        <List\n          title=\"Recommendations\"\n          content={recommendation}\n          handleFunction={addItem}\n        />\n        <h2>My List</h2>\n        <ul>\n          {myList.map((item) => (\n            <li key={item.id}>{item.title}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    myList: selectors.getMyList(state),\n    recommendation: selectors.getRecommendation(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators({ ...actions }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./modules\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}